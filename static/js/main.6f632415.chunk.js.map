{"version":3,"sources":["components/weather.module.scss","Redux/API.ts","Types/Types.ts","Redux/WeatherReducer.ts","Assets/loader.svg","components/Preloader.tsx","components/Weath.tsx","App.tsx","Redux/Store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","WeatherAPI","city","get","GET_WEATHER","IS_FETCHING","initialState","seaFilm","loading","action","payload","type","Preloader","style","height","width","display","justifyContent","alignItems","src","loader","alt","Weather","useState","setCity","search","useSelector","state","weather","dispatch","useDispatch","className","styles","maincontent","field","placeholder","value","onChange","e","target","btn","onClick","trim","alert","a","data","requestWeather","map","name","main","sys","wind","container","info","Math","round","temp","country","icon","description","datamain","datd","feels_like","pressure","speed","humidity","moment","sunrise","format","sunset","App","Weath","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f632415.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"maincontent\":\"weather_maincontent__W9xWZ\",\"field\":\"weather_field__3P5eK\",\"container\":\"weather_container__2tdlP\",\"main\":\"weather_main__3z_0N\",\"info\":\"weather_info__1-q6d\",\"datamain\":\"weather_datamain__MMKcH\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n})\r\n\r\nexport const WeatherAPI = {\r\n    getSearchWeather(city:string)  {\r\n        return instance.get(`weather?q=${city}&units=metric&appid=49e826cabdf4fd9e3444934e373c51b4`)\r\n\r\n    }\r\n}\r\n","export const GET_WEATHER = \"GET_WEATHER\"\r\nexport const IS_FETCHING = \"IS_FETCHING\"\r\n\r\ntype GetWeatherActionType = {\r\n    type: typeof GET_WEATHER\r\n    payload: WeatherData\r\n}\r\ntype SetIsFetchingActionType = {\r\n    type: typeof IS_FETCHING\r\n    loading: boolean\r\n}\r\n\r\nexport type WeatherAction = GetWeatherActionType|SetIsFetchingActionType\r\n\r\n\r\nexport type Weather = {\r\n    id: number\r\n    main: string\r\n    description: string\r\n    icon: string\r\n}\r\n\r\nexport type WeatherData = {\r\n    main: {\r\n        temp: number\r\n        feels_like: number\r\n        pressure: number\r\n        humidity: number\r\n    }\r\n    name: string\r\n    sys: {\r\n        country: string\r\n        sunrise: number \r\n        sunset: number\r\n        id:number\r\n    }\r\n    wind: {\r\n        speed: number,\r\n    }\r\n    weather: Weather[]\r\n}\r\n\r\nexport type WeatherState={\r\n    seaFilm: Array<WeatherData>\r\n    loading: boolean\r\n}\r\n","import { RootReducerType } from './Store';\r\nimport { WeatherAPI } from './API';\r\nimport { WeatherAction, WeatherState, GET_WEATHER, IS_FETCHING, WeatherData } from '../Types/Types';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\n\r\nconst initialState: WeatherState = {\r\n    seaFilm: [],\r\n    loading: false\r\n}\r\n\r\n\r\nexport const WeatherReducer = (state = initialState, action: WeatherAction): WeatherState => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                ...state,\r\n                seaFilm: [action.payload]\r\n            }\r\n        case IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const action = {\r\n    requestSearchWeather: (payload: WeatherData) => ({\r\n        type: GET_WEATHER, payload\r\n    } as const),\r\n    setLoading: (loading: boolean) => ({\r\n        type: IS_FETCHING, loading\r\n    } as const)\r\n\r\n}\r\n\r\nexport const requestWeather = (city: string): ThunkAction<Promise<void>, RootReducerType, unknown, WeatherAction> => {\r\n    return async (dispatch) => {\r\n        dispatch(action.setLoading(true))\r\n        const { data } = await WeatherAPI.getSearchWeather(city)\r\n        dispatch(action.requestSearchWeather(data))\r\n        dispatch(action.setLoading(false))\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/loader.bd1a9186.svg\";","import React from 'react'\r\nimport loader from './../Assets/loader.svg'\r\n//import styles from \"./MoviePage.module.scss\"\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div style={{height: 500, width: 500, display: 'flex', justifyContent:'center', alignItems: 'center' }}>\r\n             <img src={loader} alt=\"loader\"/> \r\n        </div>\r\n    )\r\n}\r\nexport default Preloader","import React, { FC, FormEvent, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useTypedSelector } from '../Hooks/useTypedSelector'\r\nimport { action, requestWeather } from '../Redux/WeatherReducer'\r\nimport Preloader from './Preloader'\r\nimport styles from \"./weather.module.scss\"\r\nimport moment from \"moment\";\r\nimport { RootReducerType } from '../Redux/Store'\r\nimport { WeatherData } from '../Types/Types'\r\n\r\n\r\n\r\nconst Weather: FC = () => {\r\n    const [city, setCity] = useState('');\r\n    const search = useSelector<RootReducerType, Array<WeatherData>>(state => state.weather.seaFilm);\r\n    const loading = useSelector<RootReducerType>(state => state.weather.loading);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClick = () => {\r\n        if (city.trim() === '') {\r\n            alert('Enter city') // There must be a error\r\n        }\r\n        dispatch(requestWeather(city))\r\n        setCity('')\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={styles.maincontent}>\r\n            <div className={styles.field}>\r\n                <input type=\"text\" placeholder=\"Search\" value={city} onChange={(e) => setCity(e.target.value)} /> \r\n                <button className={styles.btn} onClick={handleClick} >Search</button>\r\n            </div>\r\n\r\n            <>\r\n                {loading ? <Preloader /> :\r\n                    (search.map(({ name, main, weather, sys, wind }) => {\r\n                        return (\r\n                            <div className={styles.container}>\r\n                                <div className={styles.info}>\r\n                                    <div className={styles.main}>\r\n                                        <div >\r\n                                            {Math.round(main.temp)}\r\n                                            <span>&deg;</span>\r\n                                        </div>\r\n                                        {name} {sys.country}\r\n                                        <div>\r\n                                            <img src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`} alt={weather[0].description} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={styles.datamain}>\r\n                                        <div className={styles.datd}>\r\n                                            <div >\r\n                                                Feels like: {Math.round(main.feels_like)}\r\n                                                <span>&deg;C</span>\r\n                                            </div>\r\n                                            <div className={styles.pressure}>\r\n                                                Pressure: {main.pressure}\r\n                                            </div>\r\n                                            <div className={styles.speed}>\r\n                                                Wind: {wind.speed}m/s\r\n                                            </div>\r\n                                        </div>\r\n                                        <div>\r\n                                            <div>\r\n                                                Humidity: {main.humidity}%\r\n                                            </div>\r\n                                            <div>\r\n                                                Sunrise: {moment(sys.sunrise * 1000).format('LT')}\r\n                                            </div>\r\n                                            <div>\r\n                                                Sunset: {moment(sys.sunset * 1000).format('LT')}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div >\r\n                        )\r\n                    }))\r\n                }\r\n            </>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n\r\n","import Weather from \"./components/Weath\"\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Weather />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\"\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {WeatherReducer} from \"./WeatherReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: WeatherReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './Redux/Store';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}