{"version":3,"sources":["components/weather.module.scss","components/api.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","getWeather","city","a","axios","get","params","q","units","appid","data","Weather","useState","setCity","weather","setWeather","search","e","key","className","styles","maincontent","field","type","placeholder","value","onChange","target","onKeyPress","sys","container","info","main","Math","round","temp","name","country","src","icon","alt","description","datamain","datd","feels_like","pressure","speed","wind","humidity","moment","sunrise","format","sunset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,YAAc,6BAA6B,MAAQ,uBAAuB,UAAY,2BAA2B,KAAO,sBAAsB,KAAO,sBAAsB,SAAW,4B,wKCI3LC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACDC,IAAMC,IAJnB,kDAI4B,CAChCC,OAAO,CACHC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEU,uBACfC,EADe,EACfA,KADe,kBAQfA,GARe,2CAAH,sD,uBCgERC,EA/DC,WACZ,MAAwBC,mBAAS,IAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAEMC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACG,UAAVc,EAAEC,IADK,gCAEYjB,EAAWC,GAFvB,OAEDQ,EAFC,OAGPK,EAAWL,GACXG,EAAQ,IAJD,2CAAH,sDAQZ,OACI,sBAAKM,UAAWC,IAAOC,YAAvB,UACI,qBAAKF,UAAWC,IAAOE,MAAvB,SACI,uBAAOC,KAAK,OAAOC,YAAY,SAASC,MAAOvB,EAAMwB,SAAU,SAACT,GAAD,OAAOJ,EAAQI,EAAEU,OAAOF,QAAQG,WAAYZ,MAE9GF,EAAQe,KACL,qBAAKV,UAAWC,IAAOU,UAAvB,SACI,sBAAKX,UAAWC,IAAOW,KAAvB,UACI,sBAAKZ,UAAWC,IAAOY,KAAvB,UACI,gCACKC,KAAKC,MAAMpB,EAAQkB,KAAKG,MACzB,2CAEHrB,EAAQsB,KALb,IAKoBtB,EAAQe,IAAIQ,QAC5B,8BACI,qBAAKC,IAAG,2CAAsCxB,EAAQA,QAAQ,GAAGyB,KAAzD,WAAwEC,IAAK1B,EAAQA,QAAQ,GAAG2B,mBAIhH,sBAAKtB,UAAWC,IAAOsB,SAAvB,UACI,sBAAKvB,UAAWC,IAAOuB,KAAvB,UACI,+CACiBV,KAAKC,MAAMpB,EAAQkB,KAAKY,YACrC,4CAEJ,sBAAKzB,UAAWC,IAAOyB,SAAvB,uBACe/B,EAAQkB,KAAKa,YAE5B,sBAAK1B,UAAWC,IAAO0B,MAAvB,mBACWhC,EAAQiC,KAAKD,MADxB,YAIJ,gCACI,6CACehC,EAAQkB,KAAKgB,SAD5B,OAGA,4CACcC,IAA6B,IAAtBnC,EAAQe,IAAIqB,SAAgBC,OAAO,SAExD,2CACaF,IAA4B,IAArBnC,EAAQe,IAAIuB,QAAeD,OAAO,wBC7CvEE,EARH,WACV,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca2e4956.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"maincontent\":\"weather_maincontent__W9xWZ\",\"field\":\"weather_field__3P5eK\",\"container\":\"weather_container__2tdlP\",\"main\":\"weather_main__3z_0N\",\"info\":\"weather_info__1-q6d\",\"datamain\":\"weather_datamain__MMKcH\"};","import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather'\r\nconst API_KEY = \"45a1804cf811593a6b8ab223c862ac99\";\r\n\r\nexport const getWeather = async (city) =>{\r\n    const {data} = await axios.get(URL, {\r\n        params:{\r\n            q: city,\r\n            units: 'metric',\r\n            appid: API_KEY\r\n        }\r\n    });\r\n    return data\r\n}","import moment from \"moment\";\r\nimport React, { useState } from \"react\"\r\nimport { getWeather } from \"./api\"\r\nimport styles from \"./weather.module.scss\"\r\n\r\n\r\nconst Weather = () => {\r\n    const [city, setCity] = useState('');\r\n    const [weather, setWeather] = useState({});\r\n\r\n    const search = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            const data = await getWeather(city)\r\n            setWeather(data);\r\n            setCity('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.maincontent}>\r\n            <div className={styles.field}>\r\n                <input type=\"text\" placeholder=\"Search\" value={city} onChange={(e) => setCity(e.target.value)} onKeyPress={search} />\r\n            </div>\r\n            {weather.sys && (\r\n                <div className={styles.container}>\r\n                    <div className={styles.info}>\r\n                        <div className={styles.main}>\r\n                            <div >\r\n                                {Math.round(weather.main.temp)}\r\n                                <span>&deg;</span>\r\n                            </div>\r\n                            {weather.name} {weather.sys.country}\r\n                            <div>\r\n                                <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\r\n                                {/* <p>{weather.weather[0].description}</p> */}\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.datamain}>\r\n                            <div className={styles.datd}>\r\n                                <div >\r\n                                    Feels like: {Math.round(weather.main.feels_like)}\r\n                                    <span>&deg;C</span>\r\n                                </div>\r\n                                <div className={styles.pressure}>\r\n                                    Pressure: {weather.main.pressure}\r\n                                </div>\r\n                                <div className={styles.speed}>\r\n                                    Wind: {weather.wind.speed}m/s\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div>\r\n                                    Humidity: {weather.main.humidity}%\r\n                                </div>\r\n                                <div>\r\n                                    Sunrise: {moment(weather.sys.sunrise * 1000).format('LT')}\r\n                                </div>\r\n                                <div>\r\n                                    Sunset: {moment(weather.sys.sunset * 1000).format('LT')}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import React from \"react\"\r\n\r\nimport Weather from \"./components/weather\";\r\n\r\n\r\nconst App = ()=>{\r\n  return(\r\n    <div>\r\n      <Weather/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}